{{>partial_header}}

import json
import re
from java.text import ParseException
from java.util import Date
from {{packageName}}.api_exception import ApiException

class Deserializer(object):
	def __init__(self, date_format_string="yyyy-MM-dd", datetime_format_string="yyyy-MM-dd HH:mm:ss"):
		self.date_format_string = date_format_string
		self.datetime_format_string = datetime_format_string

    PRIMITIVE_TYPES = (float, bool, bytes, str, long, int)
	NATIVE_TYPES_MAPPING = {
        'int': int,
        'long': long,  # noqa: F821
        'float': float,
        'str': str,
        'bool': bool,
        'date': Date,
        'datetime': Date,
        'object': object,
	}

    def deserialize(self, response, response_type):
        """Deserializes response into an object.

        :param response: HttpResponseImpl object to be deserialized.
        :param response_type: class literal for
        deserialized object, or string of class name.

        :return: deserialized object.
        """
        # handle file downloading
        # save response body into a tmp file and return the instance
        if response_type == "file":
            return self.__deserialize_file(response)
        # fetch data from response object
        try:
            data = json.loads(response.body())
        except ValueError:
            data = response.body()

        return self.__deserialize(data, response_type)

    def __deserialize(self, data, klass):
        """Deserializes dict, list, str into an object.

        :param data: dict, list or str.
        :param klass: class literal, or string of class name.

        :return: object.
        """
        if data is None:
            return None

        if type(klass) == str:
            if klass.startswith('list['):
                sub_kls = re.match(r'list\[(.*)\]', klass).group(1)
                return [self.__deserialize(sub_data, sub_kls)
                        for sub_data in data]

            if klass.startswith('dict('):
                sub_kls = re.match(r'dict\(([^,]*), (.*)\)', klass).group(2)
                return {k: self.__deserialize(v, sub_kls)
                        for k, v in data.items()}

            # convert str to class
            if klass in self.NATIVE_TYPES_MAPPING:
                klass = self.NATIVE_TYPES_MAPPING[klass]
            else:
                klass = getattr({{modelPackage}}.__init__, klass)

        if klass in self.PRIMITIVE_TYPES:
            return self.__deserialize_primitive(data, klass)
        elif klass == object:
            return self.__deserialize_object(data)
        elif klass == datetime.date:
            return self.__deserialize_date(data)
        elif klass == datetime.datetime:
            return self.__deserialize_datatime(data)
        else:
            return self.__deserialize_model(data, klass)

    def __deserialize_file(self, response):
        """Deserializes body to file

        Saves response body into a file in a temporary folder,
        using the filename from the `Content-Disposition` header if provided.

        :param response:  RESTResponse.
        :return: file path.
        """
        fd, path = tempfile.mkstemp(dir=self.configuration.temp_folder_path)
        os.close(fd)
        os.remove(path)

        content_disposition = response.getheader("Content-Disposition")
        if content_disposition:
            filename = re.search(r'filename=[\'"]?([^\'"\s]+)[\'"]?',
                                 content_disposition).group(1)
            path = os.path.join(os.path.dirname(path), filename)
            response_data = response.data
            with open(path, "wb") as f:
                if isinstance(response_data, str):
                    # change str to bytes so we can write it
                    response_data = response_data.encode('utf-8')
                    f.write(response_data)
                else:
                    f.write(response_data)
        return path

    def __deserialize_primitive(self, data, klass):
        """Deserializes string to primitive type.

        :param data: str.
        :param klass: class literal.

        :return: int, long, float, str, bool.
        """
        try:
            return klass(data)
        except UnicodeEncodeError:
            return str(data)
        except TypeError:
            return data

    def __deserialize_object(self, value):
        """Return a original value.

        :return: object.
        """
        return value

	def __deserialize_date(self, string):
		"""Deserializes string to date.

		:param string: str.
		:return: date.
		"""
		try:
			return system.date.parse(string, self.date_format_string)
		except ParseException as e:
			raise ApiException(
				"Failed to parse `{0}` as datetime object"
				.format(string),
				throwable=e
			)

	def __deserialize_datetime(self, string):
		"""Deserializes string to datetime.

		The string should be in iso8601 datetime format.

		:param string: str.
		:return: datetime.
		"""
		try:
			return system.date.parse(string, self.datetime_format_string)
		except ParseException as e:
			raise ApiException(
				"Failed to parse `{0}` as datetime object"
				.format(string),
				throwable=e
			)

	def __deserialize_model(self, data, klass):
		"""Deserializes list or dict to model.

		:param data: dict, list.
		:param klass: class literal.
		:return: model object.
		"""

		if not klass.openapi_types and not self.__hasattr(klass, 'get_real_child_model'):
			return data

		kwargs = {}
		if klass.openapi_types is not None:
			for attr, attr_type in klass.openapi_types.items():
				if (data is not None and
						klass.attribute_map[attr] in data and
						isinstance(data, (list, dict))):
					value = data[klass.attribute_map[attr]]
					kwargs[attr] = self.__deserialize(value, attr_type)

		instance = klass(**kwargs)

		if (isinstance(instance, dict) and
				klass.swagger_types is not None and
				isinstance(data, dict)):
			for key, value in data.items():
				if key not in klass.openapi_types:
					instance[key] = value
		if self.__hasattr(instance, 'get_real_child_model'):
			klass_name = instance.get_real_child_model(data)
			if klass_name:
				instance = self.__deserialize(data, klass_name)
		return instance

	def __hasattr(self, object, name):
		return name in object.__class__.__dict__