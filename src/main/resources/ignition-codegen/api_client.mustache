{{>licenseInfo}}

from java.util.function import Consumer
from java.net import URLEncoder
from java.net import URI
from java.net.http import HttpClient, HttpRequest, HttpResponse
from java.time import Duration
from java.time.format import DateTimeFormatter
from java.time import OffsetDateTime
from java.nio.charset import StandardCharsets
from open_api.pair import Pair

class ApiClient:
	"""
	Configuration and utility class for API clients.

	This class can be constructed and modified, then used to instantiate the various API classes. The API classes use the settings in this class to configure themselves, but otherwise do not store a link to this class.

	This class is mutable and not synchronized, so it is not thread-safe. The API classes generated from this are immutable and thread-safe.

	The setter methods of this class return the current object to facilitate a fluent style of configuration.
	"""

	def __init__(self, builder=None, baseUri=None):
		self.updateBaseUri(baseUri if baseUri is not None else self.getDefaultBaseUri())
		self.builder = builder if builder is not None else self.createDefaultHttpClientBuilder()
		self.interceptor = None
		self.readTimeout = None
		self.connectTimeout = None
		self.responseInterceptor = None
		self.asyncResponseInterceptor = None

  	def getDefaultBaseUri(self):
        return "{{{basePath}}}"

	def updateBaseUri(self, baseUri):
		uri = URI.create(baseUri)
		self.scheme = uri.getScheme()
		self.host = uri.getHost()
		self.port = uri.getPort()
		self.basePath = uri.getRawPath()

	def createDefaultHttpClientBuilder(self):
		return HttpClient.newBuilder()

	def setHttpClientBuilder(self, builder):
		"""
		Set a custom HttpClient.Builder object to use when creating the HttpClient that is used by the API client.
		
		Args:
		    builder: Custom client builder.
		
		Returns:
		    This object.
		"""
		self.builder = builder
		return self
	
	def getHttpClient(self):
		"""
		Get an HttpClient based on the current HttpClient.Builder.
		
		The returned object is immutable and thread-safe.
		
		Returns:
		    The HTTP client.
		"""
		return self.builder.build()
	
	def setHost(self, host):
		"""
		Set a custom host name for the target service.
		
		Args:
		    host: The host name of the target service.
		
		Returns:
		    This object.
		"""
		self.host = host
		return self
	
	def setPort(self, port):
		"""
		Set a custom port number for the target service.
		
		Args:
		    port: The port of the target service. Set this to -1 to reset the value to the default for the scheme.
		
		Returns:
		    This object.
		"""
		self.port = port
		return self
		
	def setBasePath(self, basePath):
		"""
		Set a custom base path for the target service, for example '/v2'.
		
		Args:
		    basePath: The base path against which the rest of the path is resolved.
		
		Returns:
		    This object.
		"""
		self.basePath = basePath
		return self
	 
	def getBaseUri(self):
		"""
		Get the base URI to resolve the endpoint paths against.
		
		Returns:
		    The complete base URI that the rest of the API parameters are resolved against.
		"""
		return self.scheme + "://" + self.host + ("" if self.port == -1 else ":" + str(self.port)) + self.basePath
		
	def setScheme(self, scheme):
		"""
		Set a custom scheme for the target service, for example 'https'.
		
		Args:
		    scheme: The scheme of the target service.
		
		Returns:
		    This object.
		"""
		self.scheme = scheme
		return self
		
	def setRequestInterceptor(self, interceptor):
		"""
		Set a custom request interceptor.
		
		A request interceptor is a mechanism for altering each request before it is sent. After the request has been fully configured but not yet built, the request builder is passed into this function for further modification, after which it is sent out.
		
		This is useful for altering the requests in a custom manner, such as adding headers. It could also be used for logging and monitoring.
		
		Args:
		    interceptor: A function invoked before creating each request. A value of None resets the interceptor to a no-op.
		
		Returns:
		    This object.
		"""
		self.interceptor = interceptor
		return self

	def getRequestInterceptor(self):
		"""
		Get the custom interceptor.
		
		Returns:
		    The custom interceptor that was set, or None if there isn't any.
		"""
		return self.interceptor

	def setResponseInterceptor(self, interceptor):
		"""
		Set a custom response interceptor.
		
		This is useful for logging, monitoring or extraction of header variables.
		
		Args:
		    interceptor: A function invoked before creating each request. A value of None resets the interceptor to a no-op.
		
		Returns:
		    This object.
		"""
		self.responseInterceptor = interceptor
		return self

	def getResponseInterceptor(self):
		"""
		Get the custom response interceptor.
		
		Returns:
		    The custom interceptor that was set, or None if there isn't any.
		"""
		return self.responseInterceptor

	def setAsyncResponseInterceptor(self, interceptor):
		"""
		Set a custom async response interceptor. Use this interceptor when asyncNative is set to 'true'.
		
		This is useful for logging, monitoring or extraction of header variables.
		
		Args:
		    interceptor: A function invoked before creating each request. A value of None resets the interceptor to a no-op.
		
		Returns:
		    This object.
		"""
		self.asyncResponseInterceptor = interceptor
		return self

	def getAsyncResponseInterceptor(self):
		"""
		Get the custom async response interceptor. Use this interceptor when asyncNative is set to 'true'.
		
		Returns:
		    The custom interceptor that was set, or None if there isn't any.
		"""
		return self.asyncResponseInterceptor

	def setReadTimeout(self, readTimeout):
		"""
		Set the read timeout for the http client.
		
		This is the value used by default for each request, though it can be overridden on a per-request basis with a request interceptor.
		
		Args:
		    readTimeout: The read timeout used by default by the http client. Setting this value to None resets the timeout to an effectively infinite value.
		
		Returns:
		    This object.
		"""
		self.readTimeout = readTimeout
		return self

	def getReadTimeout(self):
		"""
		Get the read timeout that was set.
		
		Returns:
		    The read timeout, or None if no timeout was set. None represents an infinite wait time.
		"""
		return self.readTimeout
	
	def setConnectTimeout(self, connectTimeout):
		"""
		Sets the connect timeout (in milliseconds) for the http client.
		
		In the case where a new connection needs to be established, if the connection cannot be established within the given duration, then HttpClient.send throws an HttpConnectTimeoutException, or HttpClient.sendAsync completes exceptionally with an HttpConnectTimeoutException. If a new connection does not need to be established, for example if a connection can be reused from a previous request, then this timeout duration has no effect.
		
		Args:
		    connectTimeout: connection timeout in milliseconds.
		
		Returns:
		    This object.
		"""
		self.connectTimeout = connectTimeout
		self.builder.connectTimeout(connectTimeout)
		return self

	def getConnectTimeout(self):
		"""
		Get connection timeout (in milliseconds).
		
		Returns:
		    Timeout in milliseconds.
		"""
		return self.connectTimeout
    
	@staticmethod
	def valueToString(self, value):
		if value is None:
			return ""
		if isinstance(value, OffsetDateTime):
			return value.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
		return str(value)

	@staticmethod
	def urlEncode(s):
		"""
		URL encode a string in the UTF-8 encoding.

		@param s String to encode.
		@return URL-encoded representation of the input string.
		"""
		return URLEncoder.encode(s, StandardCharsets.UTF_8).replace("+", "%20")

	@staticmethod	
	def parameterToPairs(name, value=None, collectionFormat=None, values=None):
		"""
		Convert a URL query name/value parameter to a list of encoded Pair objects.

		The value can be null, in which case an empty list is returned.

		Args:
			name: The query name parameter.
			value: The query value, which may not be a collection but may be null.

		Returns:
			A singleton list of the Pair objects representing the input parameters, which is encoded for use in a URL. If the value is null, an empty list is returned.
		"""

		if name is None or name == "" or (value is None and (values is None or len(values) == 0)):
			return Collections.emptyList()
	
		if value is not None:
			return Collections.singletonList(Pair(urlEncode(name), urlEncode(valueToString(value))))
	
		collectionFormatValue = "csv" if collectionFormat is None or collectionFormat == "" else collectionFormat
	
		if collectionFormatValue == "multi":
			return values.stream().map(lambda v: Pair(urlEncode(name), urlEncode(valueToString(v)))).collect(Collectors.toList())
	
		delimiter = ""
		if collectionFormatValue == "csv":
			delimiter = urlEncode(",")
		elif collectionFormatValue == "ssv":
			delimiter = urlEncode(" ")
		elif collectionFormatValue == "tsv":
			delimiter = urlEncode("\t")
		elif collectionFormatValue == "pipes":
			delimiter = urlEncode("|")
		else:
			raise IllegalArgumentException("Illegal collection format: " + collectionFormat)
	
		joiner = StringJoiner(delimiter)
		for v in values:
			joiner.add(urlEncode(valueToString(v)))
	
		return Collections.singletonList(Pair(urlEncode(name), joiner.toString()))